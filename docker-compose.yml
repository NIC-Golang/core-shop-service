services:
  core-shop-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${CORE_SERVICE_PORT}
    env_file:
      - ./.env
    depends_on:
      - postsql
    networks:
      - postgres_network
    profiles:
      - dev

  postgreadmin:
    image: dpage/pgadmin4
    container_name: postgreadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postsql
    networks:
      - postgres_network
    profiles:
      - test
      - dev

  postsql:
    image: postgres:13.3
    container_name: postsql
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db_create.sql:/docker-entrypoint-initdb.d/create-db.sql
    ports:
      - 5432:5432
    networks:
      - postgres_network
    profiles:
     - test
     - dev

  test_runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      postsql:
        condition: service_healthy
    env_file:
      - ./.env
    command: ["go", "test", "./..."]
    networks:
      - postgres_network
    profiles:
      - test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 1
      timeout: 3s
  
volumes:
  pgadmin-data:
  postgres-data:

networks:
  postgres_network:
    driver: bridge
